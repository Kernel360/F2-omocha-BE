name: Java CI with Gradle Deploy

on:
  push:
    branches: [ "deploy" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout the code
      uses: actions/checkout@v4

    - name: Run chmod to make gradlew executable
      run: chmod +x ./gradlew 

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Set environment values
      run: |
        cd ./omocha-client/src/main/resources
        touch ./env.
        echo "${{ secrets.ENV }}" > ./env
      shell: bash

    - name: Build with Gradle
      run: |
        ./gradlew clean build -x test
        
    - name: Docker build and push
      run: |
        # log in to docker hub
        echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
        # build docker image
        docker build -t ${{ secrets.DOCKERHUB_NAME }}/${{ secrets.DOCKERHUB_REPOSITORY }} .
        # push docker image to docker hub
        docker buildx build --push --platform linux/amd64 -t ${{ secrets.DOCKERHUB_NAME }}/${{ secrets.DOCKERHUB_REPOSITORY }} .
    - name: Clean up dangling Docker images locally
      run: |
        sudo docker image prune -f
        
    - name: Test SSH connection
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.PUBLIC_DNS }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          echo "Testing SSH connection"
          uptime
    - name: Deploy to EC2 Server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.PUBLIC_DNS }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          echo ${{ secrets.DOCKERHUB_PASSWORD }} | sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          echo "모든 실행 중인 컨테이너 중지"
          sudo docker stop $(sudo docker ps -aq)  # 모든 실행 중인 컨테이너 중지
          echo "모든 컨테이너 및 네트워크 삭제"
          sudo docker rm $(sudo docker ps -aq)  # 모든 컨테이너 삭제
          # sudo docker network prune -f  # 모든 브리지 네트워크 삭제 (주의: 사용 중인 네트워크도 삭제됨)
            
          echo "모든 이미지 삭제"
          sudo docker rmi $(sudo docker images -q)  # 모든 이미지 삭제
          
          sudo docker pull ${{ secrets.DOCKERHUB_NAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}
          sudo docker tag ${{ secrets.DOCKERHUB_NAME }}/${{ secrets.DOCKERHUB_REPOSITORY }} omocha
          
          cd ./omocha
          # sudo docker-compose down
          sudo docker compose up -d
          
          # Clean up old Docker images on the server
          sudo docker image prune -af --filter "until=24h"
