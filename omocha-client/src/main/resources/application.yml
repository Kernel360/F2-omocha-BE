spring:
  application:
    name: omocha
  profiles:
    active: prod # 개발 환경에 따라 변경할 것 (local | prod)
  output:
    ansi:
      enabled: always
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
    show-sql: false
    hibernate:
      ddl-auto: update
    open-in-view: false

  sql:
    init:
      mode: never

cloud:
  aws:
    stack:
      auto: false
    region:
      static: ${AWS_REGION_NAME}
    credentials:
      access-key: ${S3_ACCESS_KEY}
      secret-key: ${S3_SECRET_KEY}
    s3:
      bucket: ${S3_BUCKET_NAME}
      upload-path: ${S3_IMAGE_PATH}

jwt:
  access_secret: ${JWT_ACCESS_SECRET}
  refresh_secret: ${JWT_REFRESH_SECRET}
---
spring:
  config:
    activate:
      on-profile: local
  datasource:
    url: jdbc:postgresql://${DATABASE_HOSTNAME}:${DATABASE_PORT}/${DATABASE_NAME}
    username: ${DATABASE_USERNAME}
    password: ${DATABASE_PASSWORD}
    driver-class-name: org.postgresql.Driver

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect_uri: http://localhost:8080/api/v1/login/oauth2/code/google
            scope:
              - email
              - profile

          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect_uri: http://localhost:8080/api/v1/login/oauth2/code/naver
            client-name: Naver
            authorization-grant-type: authorization_code
            scope:
              - email

        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

url:
  base: http://localhost:8080
  domain: ""
  backend-domain: http://localhost:8080
---
spring:
  config:
    activate:
      on-profile: prod
  datasource:
    url: ${AWS_DATASOURCE_URL}
    username: ${AWS_DATABASE_USERNAME}
    password: ${AWS_DATABASE_PASSWORD}
    driver-class-name: org.postgresql.Driver

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect_uri: http://api.omocha-auction.com/api/v1/login/oauth2/code/google
            scope:
              - email
              - profile

          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect_uri: http://api.omocha-auction.com/api/v1/login/oauth2/code/naver
            client-name: Naver
            authorization-grant-type: authorization_code
            scope:
              - email

        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

url:
  base: https://www.omocha-auction.com
  domain: omocha-auction.com
  backend-domain: https://api.omocha-auction.com